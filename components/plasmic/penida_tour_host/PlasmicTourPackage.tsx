// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8sqboUZ4NdiwTEB5KeNSKm
// Component: 0Pcep1A6T4N4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_penida_tour_host.module.css"; // plasmic-import: 8sqboUZ4NdiwTEB5KeNSKm/projectcss
import sty from "./PlasmicTourPackage.module.css"; // plasmic-import: 0Pcep1A6T4N4/css

createPlasmicElementProxy;

export type PlasmicTourPackage__VariantMembers = {};
export type PlasmicTourPackage__VariantsArgs = {};
type VariantPropType = keyof PlasmicTourPackage__VariantsArgs;
export const PlasmicTourPackage__VariantProps = new Array<VariantPropType>();

export type PlasmicTourPackage__ArgsType = {};
type ArgPropType = keyof PlasmicTourPackage__ArgsType;
export const PlasmicTourPackage__ArgProps = new Array<ArgPropType>();

export type PlasmicTourPackage__OverridesType = {
  root?: Flex__<"div">;
  dataProvider?: Flex__<typeof DataProvider>;
  h1?: Flex__<"h1">;
};

export interface DefaultTourPackageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTourPackage__RenderFunc(props: {
  variants: PlasmicTourPackage__VariantsArgs;
  args: PlasmicTourPackage__ArgsType;
  overrides: PlasmicTourPackage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <DataProvider
            data-plasmic-name={"dataProvider"}
            data-plasmic-override={overrides.dataProvider}
            className={classNames("__wab_instance", sty.dataProvider)}
            data={[
              {
                id: "01",
                package_name: "West Nusapenida tour",
                feature_image: "/section2-min.jpg",
                images: [
                  "http://www.image.com",
                  "http://www.image.com",
                  "http://www.image.com"
                ],
                description:
                  "Explore the most popular places in nusa penida: klingking beach, Broken Beach, Angel billabong and Crystal bay",
                price_per_person: 825000,
                minimum_people: 2,
                itineraries: [
                  { time: "06:00 AM", activity: "Pick up time" },
                  { time: "07:00 AM", activity: "Arrive sanur harbor" },
                  { time: "07:30 AM", activity: "Boarding pass" },
                  { time: "07:45 AM", activity: "Leave Sanur" },
                  {
                    time: "09:00 AM",
                    activity: "Arrive in Nusa Penida Island at Buyuk harbor"
                  },
                  { time: "10:00 AM", activity: "Explore Kelingking Beach" },
                  {
                    time: "11:00 AM",
                    activity: "Visit Broken Beach and Angel Billabong"
                  },
                  { time: "12:15 PM", activity: "Lunch at Restaurant" },
                  { time: "01:40 PM", activity: "Swim at Crystal Bay" },
                  { time: "03:15 PM", activity: "Back to Buyuk Harbor" },
                  { time: "04:00 PM", activity: "Depart to Sanur Harbor" },
                  {
                    time: "05:20 PM",
                    activity: "Back to accommodation drop to the Hotel"
                  }
                ],
                whats_included: [
                  "Speed Boat To Nusa Penida",
                  "Entrance Fees",
                  "English speaking guide",
                  "Hotel pickup and drop off"
                ],
                whats_excluded: ["Personal Expenses", "Meals"],
                cancellation_policy: "Free Cancellation Before 24 hour"
              },
              {
                id: "02",
                package_name: "East Nusapenida tour",
                feature_image: "http://www.image.com",
                images: [
                  "http://www.image.com",
                  "http://www.image.com",
                  "http://www.image.com"
                ],
                description:
                  "East Explore the most popular places in nusa penida: klingking beach, Broken Beach, Angel billabong and Crystal bay",
                price_per_person: 900,
                minimum_people: 3,
                itineraries: [
                  { time: "06:00 AM", activity: "Pick up time" },
                  { time: "07:00 AM", activity: "Arrive sanur harbor" },
                  { time: "07:30 AM", activity: "Boarding pass" },
                  { time: "07:45 AM", activity: "Leave Sanur" },
                  {
                    time: "09:00 AM",
                    activity: "Arrive in Nusa Penida Island at Buyuk harbor"
                  },
                  { time: "10:00 AM", activity: "Explore Kelingking Beach" },
                  {
                    time: "11:00 AM",
                    activity: "Visit Broken Beach and Angel Billabong"
                  },
                  { time: "12:15 PM", activity: "Lunch at Restaurant" },
                  { time: "01:40 PM", activity: "Swim at Crystal Bay" },
                  { time: "03:15 PM", activity: "Back to Buyuk Harbor" },
                  { time: "04:00 PM", activity: "Depart to Sanur Harbor" },
                  {
                    time: "05:20 PM",
                    activity: "Back to accommodation drop to the Hotel"
                  }
                ],
                whats_included: [
                  "Speed Boat To Nusa Penida",
                  "Entrance Fees",
                  "English speaking guide",
                  "Hotel pickup and drop off"
                ],
                whats_excluded: ["Personal Expenses", "Meals"],
                cancellation_policy: "Free Cancellation Before 24 hour"
              }
            ]}
            name={"tourlist"}
          >
            <DataCtxReader__>
              {$ctx => (
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.tourlist.find(
                          tour => tour.id === $ctx.params.slug
                        ).package_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h1>
              )}
            </DataCtxReader__>
          </DataProvider>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dataProvider", "h1"],
  dataProvider: ["dataProvider", "h1"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dataProvider: typeof DataProvider;
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTourPackage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTourPackage__VariantsArgs;
    args?: PlasmicTourPackage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTourPackage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTourPackage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTourPackage__ArgProps,
          internalVariantPropNames: PlasmicTourPackage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTourPackage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTourPackage";
  } else {
    func.displayName = `PlasmicTourPackage.${nodeName}`;
  }
  return func;
}

export const PlasmicTourPackage = Object.assign(
  // Top-level PlasmicTourPackage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataProvider: makeNodeComponent("dataProvider"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicTourPackage
    internalVariantProps: PlasmicTourPackage__VariantProps,
    internalArgProps: PlasmicTourPackage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTourPackage;
/* prettier-ignore-end */
