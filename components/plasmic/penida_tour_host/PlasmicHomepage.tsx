// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8sqboUZ4NdiwTEB5KeNSKm
// Component: uiobudG9bYmv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Button from "../../Button"; // plasmic-import: ZzYHWFOP3W93/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantst5XXltJfKzLl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: T5xXLTJfKZLl/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_penida_tour_host.module.css"; // plasmic-import: 8sqboUZ4NdiwTEB5KeNSKm/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: uiobudG9bYmv/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: piPhikoMaLwY/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: oAGk-17bb9h7/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  hero?: Flex__<"section">;
  h6?: Flex__<"h6">;
  why?: Flex__<"section">;
  columns?: Flex__<"div">;
  article?: Flex__<"article">;
  tour?: Flex__<"section">;
  h5?: Flex__<"h5">;
  section?: Flex__<"section">;
  h3?: Flex__<"h3">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8xqfPDGVgCNgQpvPK4GUce",
        opId: "25d5bca8-c67e-47cc-90c9-dc76c4ed4a41",
        userArgs: {},
        cacheKey: `plasmic.$.25d5bca8-c67e-47cc-90c9-dc76c4ed4a41.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantst5XXltJfKzLl()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___2JLk
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___5HgFg)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/nav-logo-placeholder.svg"}
                />
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__rMlM6)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={24}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__v4155
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Home"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__f7Bxe
                  )}
                  component={Link}
                  href={"#about"}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__joYud
                  )}
                  component={Link}
                  href={"#packages"}
                  platform={"nextjs"}
                >
                  {"Packages"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__imuz9
                  )}
                  component={Link}
                  href={"#cta"}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__pcDqh)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <section
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
            id={"hero"}
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal__aysVl)}
              direction={"up"}
              effect={"slide"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xYcfp)}
              >
                <h6
                  data-plasmic-name={"h6"}
                  data-plasmic-override={overrides.h6}
                  className={classNames(
                    projectcss.all,
                    projectcss.h6,
                    projectcss.__wab_text,
                    sty.h6
                  )}
                >
                  {"nusapenidatourhost.com"}
                </h6>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__vyyG
                  )}
                >
                  {"Explore Nusapenida"}
                </h1>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__cIhdc
                  )}
                >
                  {"Explore the most popular places in nusa penida "}
                </h4>
                <div className={classNames(projectcss.all, sty.freeBox__wHkBi)}>
                  <Button
                    className={classNames("__wab_instance", sty.button___81WQ)}
                    color={"yellow"}
                    link={"#about"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dUys7
                      )}
                    >
                      {"Learn More"}
                    </div>
                  </Button>
                </div>
              </Stack__>
            </Reveal>
          </section>
          <section
            data-plasmic-name={"why"}
            data-plasmic-override={overrides.why}
            className={classNames(projectcss.all, sty.why)}
            id={"about"}
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal__ne5Ys)}
              direction={"up"}
              effect={"slide"}
              triggerOnce={true}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__nNqFy)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__xB1Z8
                    )}
                  >
                    {"Why Nusapenida?"}
                  </h1>
                  <article
                    data-plasmic-name={"article"}
                    data-plasmic-override={overrides.article}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.article
                    )}
                  >
                    {
                      "Bali is the most tourist destination in the word, there are so many places we can explore during you are in Bali, not only , Kuta,  Canggu, Jimbaran  or Sanur, there are still so many beach we still can explore in Bali,one of the famous place is Nusapenida Island, only one hour crossing from Sanur Harbor which is the main harbor in bali to Nusapenida, \n\nNusa Penida just a small island which is only 209.4 km square and 60.000 population in this island, nusa penida is part of the Klungkung Regency and province of Bali , there are so may beach that  also can explore in one day, Klingking beach is the most popular one, people called T-rex , such an amazing view from the top of the above Clift, beside that we have Broken beach, Angel Billabong beach, Crystal bay, Atuh, Diamond and tree house "
                    }
                  </article>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9O3YS)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__sx5D7
                      )}
                      color={"yellow"}
                      link={"#packages"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nKfgn
                        )}
                      >
                        {"See Package"}
                      </div>
                    </Button>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__bKhLc)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__g4SF3)}
                    displayHeight={"580px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"600px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/penida_tour_host/images/nusped2Minjpg.jpg",
                      fullWidth: 768,
                      fullHeight: 1024,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </Stack__>
            </Reveal>
          </section>
          <section
            data-plasmic-name={"tour"}
            data-plasmic-override={overrides.tour}
            className={classNames(projectcss.all, sty.tour)}
            id={"packages"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mgTG)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.query.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mIqMu)}
                    key={currentIndex}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__y8Wvr)}
                      displayHeight={"200px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"100%"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.feature_img;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__glww)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7Y5P
                        )}
                      >
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4__gjhS
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h4>
                        <h5
                          data-plasmic-name={"h5"}
                          data-plasmic-override={overrides.h5}
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.price;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h5>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rsXOh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y5MhJ
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0K9RV
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___3GqgY
                          )}
                          color={"yellow"}
                          link={`/${(() => {
                            try {
                              return currentItem.package_id;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}`}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__f7Axl
                            )}
                          >
                            {"See Package"}
                          </div>
                        </Button>
                      </div>
                    </Stack__>
                  </div>
                );
              })}
            </div>
          </section>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
            id={"cta"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lWMgQ)}>
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                {"Get your vacation on \nwith Nusapenidatourhost.com"}
              </h3>
              <div className={classNames(projectcss.all, sty.freeBox__bFwCi)}>
                <Button
                  className={classNames("__wab_instance", sty.button__qgXUa)}
                  color={"yellow"}
                >
                  {"Contact Us"}
                </Button>
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "hero",
    "h6",
    "why",
    "columns",
    "article",
    "tour",
    "h5",
    "section",
    "h3"
  ],
  navigationBar: ["navigationBar"],
  hero: ["hero", "h6"],
  h6: ["h6"],
  why: ["why", "columns", "article"],
  columns: ["columns", "article"],
  article: ["article"],
  tour: ["tour", "h5"],
  h5: ["h5"],
  section: ["section", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  hero: "section";
  h6: "h6";
  why: "section";
  columns: "div";
  article: "article";
  tour: "section";
  h5: "h5";
  section: "section";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    hero: makeNodeComponent("hero"),
    h6: makeNodeComponent("h6"),
    why: makeNodeComponent("why"),
    columns: makeNodeComponent("columns"),
    article: makeNodeComponent("article"),
    tour: makeNodeComponent("tour"),
    h5: makeNodeComponent("h5"),
    section: makeNodeComponent("section"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
